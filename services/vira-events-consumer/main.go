// cmd/consumer/main.go
package main

import (
	"context"
	"os"
	"os/signal"
	"syscall"
	"time"

	// –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Ä–≤–∏—Å
	config "github.com/skrolikov/vira-config"
	db "github.com/skrolikov/vira-db"
	kafka "github.com/skrolikov/vira-kafka"
	log "github.com/skrolikov/vira-logger"
)

type UserLoggedInEvent struct {
	Type      string `json:"type"`
	UserID    string `json:"user_id"`
	Username  string `json:"username"`
	IP        string `json:"ip"`
	UA        string `json:"ua"`
	Time      string `json:"time"`
	SessionID string `json:"session_id"`
	Success   bool   `json:"success"`
	Device    string `json:"device"`
}

func main() {
	cfg := config.Load()

	logger := log.New(log.Config{
		Level:      log.DEBUG,
		JsonOutput: false,
		ShowCaller: true,
		Color:      true,
	})

	logger.Info("üöÄ –ó–∞–ø—É—Å–∫ consumer vira-events")
	logger.Info("KafkaAddr: %s", cfg.KafkaAddr)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// graceful shutdown –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
	sigchan := make(chan os.Signal, 1)
	signal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-sigchan
		logger.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª %v, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...", sig)
		cancel()
	}()

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
	if _, err := db.Init(ctx, cfg); err != nil {
		logger.Fatal("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: %v", err)
	}
	dbConn, err := db.Get()
	if err != nil {
		logger.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: %v", err)
	}
	userLoginRepo := db.NewUserLoginRepository(dbConn)
	logger.Info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer ---
	consumer := kafka.NewConsumer(kafka.ConsumerConfig{
		Brokers:           []string{cfg.KafkaAddr},
		Topic:             "vira-events",
		GroupID:           "vira-events-consumer",
		MinBytes:          1 * 1024,         // 1KB
		MaxBytes:          10 * 1024 * 1024, // 10MB
		MaxWait:           500 * time.Millisecond,
		CommitInterval:    1 * time.Second,
		HeartbeatInterval: 3 * time.Second,
		SessionTimeout:    30 * time.Second,
		StartOffset:       -1, // LastOffset
		MaxRetryAttempts:  3,
		RetryBackoff:      200 * time.Millisecond,

		// –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ç—Ä–µ–π—Å–µ—Ä:
		Metrics: nil,
		Tracer:  nil,

		Logger: logger.WithFields(map[string]any{"component": "kafka-consumer"}),
	})
	defer func() {
		if err := consumer.Close(); err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Kafka consumer: %v", err)
		}
	}()

	logger.Info("üõ∞Ô∏è Kafka consumer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

	// --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª—ã ---
	msgCh, errCh := consumer.Consume(ctx)
outer:
	for {
		select {
		case <-ctx.Done():
			logger.Info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞")
			break outer

		case err := <-errCh:
			logger.Error("–û—à–∏–±–∫–∞ –≤ consumer: %v", err)

		case msg, ok := <-msgCh:
			if !ok {
				logger.Info("–ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç, –≤—ã—Ö–æ–¥–∏–º")
				break outer
			}

			// –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
			var event UserLoggedInEvent
			if err := consumer.DecodeMessage(msg, &event); err != nil {
				logger.Error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				consumer.CommitMessage(ctx, msg) // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ¬´—Å–ª–æ–º–∞–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
				continue
			}

			if event.Type != "UserLoggedIn" {
				// –ø—Ä–æ—Å—Ç–æ –º–µ—Ç–∏–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
				consumer.CommitMessage(ctx, msg)
				continue
			}

			// –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
			parsedTime, err := time.Parse(time.RFC3339, event.Time)
			if err != nil {
				logger.Warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–æ–±—ã—Ç–∏–∏ %q, —Å—Ç–∞–≤–∏–º now: %v", event.Time, err)
				parsedTime = time.Now()
			}

			// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
			if err := userLoginRepo.Save(ctx,
				event.UserID,
				event.Username,
				event.IP,
				event.UA,
				event.SessionID,
				parsedTime,
				event.Success,
				event.Device,
			); err != nil {
				logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –ë–î: %v", err)
				continue
			}

			// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ñ—Ñ—Å–µ—Ç
			if err := consumer.CommitMessage(ctx, msg); err != nil {
				logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
			}

			logger.Info("‚úÖ UserLoggedIn —Å–æ—Ö—Ä–∞–Ω—ë–Ω: user_id=%s username=%s", event.UserID, event.Username)
		}
	}

	logger.Info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã vira-events consumer")
}
