import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { 
  ArrowRight, 
  Code, 
  Users, 
  Trophy, 
  BookOpen, 
  Target, 
  Play,
  Sparkles,
  Rocket,
  Brain,
  Layers,
  GitBranch
} from 'lucide-react';
import { Button } from '../components/button';
import { GlassCard } from '../components/glassCard';

interface AnimatedCounterProps {
  end: number;
  duration?: number;
  suffix?: string;
  prefix?: string;
}

function AnimatedCounter({ end, duration = 2000, suffix = '', prefix = '' }: AnimatedCounterProps) {
  const [count, setCount] = useState(0);

  useEffect(() => {
    let startTime: number;
    let animationFrame: number;

    const animate = (timestamp: number) => {
      if (!startTime) startTime = timestamp;
      const progress = Math.min((timestamp - startTime) / duration, 1);
      
      setCount(Math.floor(progress * end));
      
      if (progress < 1) {
        animationFrame = requestAnimationFrame(animate);
      }
    };

    animationFrame = requestAnimationFrame(animate);
    return () => cancelAnimationFrame(animationFrame);
  }, [end, duration]);

  return <span>{prefix}{count.toLocaleString()}{suffix}</span>;
}

export function Home() {
  const [hoveredCard, setHoveredCard] = useState<string | null>(null);

  const features = [
    {
      id: 'interactive',
      title: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
      description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é',
      icon: <Play className="w-8 h-8" />,
      gradient: 'from-blue-500 to-cyan-500',
      stats: { value: 500, suffix: '+', label: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤' }
    },
    {
      id: 'community',
      title: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      description: '–û–±—â–∞–π—Ç–µ—Å—å, –¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –∏ —Ä–∞—Å—Ç–∏—Ç–µ –≤–º–µ—Å—Ç–µ',
      icon: <Users className="w-8 h-8" />,
      gradient: 'from-purple-500 to-pink-500',
      stats: { value: 25000, suffix: '+', label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' }
    },
    {
      id: 'projects',
      title: '–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
      description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö',
      icon: <Code className="w-8 h-8" />,
      gradient: 'from-green-500 to-emerald-500',
      stats: { value: 150, suffix: '+', label: '–ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ' }
    },
    {
      id: 'mentorship',
      title: '–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ',
      description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      icon: <Target className="w-8 h-8" />,
      gradient: 'from-orange-500 to-red-500',
      stats: { value: 100, suffix: '+', label: '–≠–∫—Å–ø–µ—Ä—Ç–æ–≤-–º–µ–Ω—Ç–æ—Ä–æ–≤' }
    }
  ];

  const technologies = [
    { name: 'React', icon: '‚öõÔ∏è', level: 95 },
    { name: 'TypeScript', icon: 'üìò', level: 90 },
    { name: 'Node.js', icon: 'üü¢', level: 88 },
    { name: 'Python', icon: 'üêç', level: 85 },
    { name: 'Docker', icon: 'üê≥', level: 82 },
    { name: 'AWS', icon: '‚òÅÔ∏è', level: 78 }
  ];

  const achievements = [
    { icon: 'üèÜ', title: '–õ—É—á—à–∞—è EdTech –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ 2024', org: 'TechCrunch' },
    { icon: '‚≠ê', title: '4.9/5 —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', org: 'Trustpilot' },
    { icon: 'üöÄ', title: '95% —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤', org: 'Career Report' }
  ];

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Enhanced animated background */}
      <div className="absolute inset-0">

        {/* Floating code symbols */}
        {Array.from({ length: 20 }).map((_, i) => (
          <div
            key={i}
            className="absolute text-white/10 font-mono text-2xl animate-float"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 20}s`,
              animationDuration: `${15 + Math.random() * 10}s`,
            }}
          >
            {['<>', '{}', '[]', '()', '/>', '&&', '||', '=>'][Math.floor(Math.random() * 8)]}
          </div>
        ))}
      </div>

      <div className="relative z-10 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Hero Section */}
          <div className="text-center mb-16 pt-20">
            <div className="flex items-center justify-center space-x-3 mb-8 animate-fade-in-up">
              <Code className="w-12 h-12 text-purple-400" />
              <h1 className="text-5xl md:text-7xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400 bg-clip-text text-transparent">
                Vira.Dev
              </h1>
              <Sparkles className="w-8 h-8 text-yellow-400 animate-pulse" />
            </div>
            
            <h2 className="text-3xl md:text-5xl font-bold text-white mb-6 animate-fade-in-up delay-200">
              –ë—É–¥—É—â–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
              <span className="block bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
              </span>
            </h2>
            
            <p className="text-xl text-white/80 mb-8 max-w-3xl mx-auto leading-relaxed animate-fade-in-up delay-300">
              –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ò–ò-–º–µ–Ω—Ç–æ—Ä–æ–º, 
              –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12 animate-fade-in-up delay-500">
              <Link to="/register">
                <Button
                  variant="primary"
                  size="lg"
                  icon={<Rocket size={20} />}
                  className="group relative overflow-hidden"
                >
                  <span className="relative z-10">–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</span>
                  <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 -translate-x-full group-hover:translate-x-full transition-transform duration-1000" />
                </Button>
              </Link>
              
              <Link to="/auth">
                <Button
                  variant="secondary"
                  size="lg"
                  icon={<ArrowRight size={20} />}
                  className="group"
                >
                  <span>–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</span>
                </Button>
              </Link>
            </div>

            {/* Live stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto animate-fade-in-up delay-700">
              {[
                { value: 50000, suffix: '+', label: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤' },
                { value: 1200, suffix: '+', label: '–ö—É—Ä—Å–æ–≤' },
                { value: 95, suffix: '%', label: '–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' },
                { value: 24, suffix: '/7', label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' }
              ].map((stat, index) => (
                <div key={index} className="text-center">
                  <div className="text-3xl font-bold text-white mb-2">
                    <AnimatedCounter end={stat.value} suffix={stat.suffix} />
                  </div>
                  <div className="text-white/60 text-sm">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Bento Grid Layout */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
            {/* Large feature card */}
            <div className="lg:col-span-2 lg:row-span-2">
              <GlassCard className="p-8 h-full relative group overflow-hidden">
                <div className="absolute inset-0 bg-gradient-to-br from-purple-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                <div className="relative z-10">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="p-3 rounded-2xl bg-gradient-to-br from-purple-500/20 to-pink-500/20">
                      <Brain className="w-8 h-8 text-purple-400" />
                    </div>
                    <h3 className="text-2xl font-bold text-white">–ò–ò-–ú–µ–Ω—Ç–æ—Ä</h3>
                  </div>
                  
                  <p className="text-white/70 text-lg mb-6 leading-relaxed">
                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, 
                    –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                  </p>
                  
                  <div className="space-y-4 mb-8">
                    {[
                      '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
                      '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                      '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π',
                      '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π'
                    ].map((feature, index) => (
                      <div key={index} className="flex items-center space-x-3">
                        <div className="w-2 h-2 bg-purple-400 rounded-full" />
                        <span className="text-white/80">{feature}</span>
                      </div>
                    ))}
                  </div>
                  
                  <Button variant="primary" icon={<Sparkles size={18} />}>
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ò–ò-–º–µ–Ω—Ç–æ—Ä–∞
                  </Button>
                </div>
              </GlassCard>
            </div>

            {/* Technology stack */}
            <div className="lg:col-span-1">
              <GlassCard className="p-6 h-full">
                <div className="flex items-center space-x-3 mb-6">
                  <Layers className="w-6 h-6 text-cyan-400" />
                  <h3 className="text-xl font-bold text-white">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h3>
                </div>
                
                <div className="space-y-4">
                  {technologies.slice(0, 4).map((tech, index) => (
                    <div key={index} className="group">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <span className="text-xl">{tech.icon}</span>
                          <span className="text-white font-medium">{tech.name}</span>
                        </div>
                        <span className="text-white/60 text-sm">{tech.level}%</span>
                      </div>
                      <div className="w-full bg-white/10 rounded-full h-2">
                        <div 
                          className="bg-gradient-to-r from-cyan-500 to-blue-500 h-2 rounded-full transition-all duration-1000 group-hover:from-purple-500 group-hover:to-pink-500"
                          style={{ width: `${tech.level}%` }}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </GlassCard>
            </div>

            {/* Live coding preview */}
            <div className="lg:col-span-1">
              <GlassCard className="p-6 h-full bg-black/20">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="flex space-x-1">
                    <div className="w-3 h-3 bg-red-400 rounded-full" />
                    <div className="w-3 h-3 bg-yellow-400 rounded-full" />
                    <div className="w-3 h-3 bg-green-400 rounded-full" />
                  </div>
                  <span className="text-white/60 text-sm">live-coding.tsx</span>
                </div>
                
                <div className="font-mono text-sm space-y-2">
                  <div className="text-purple-400">
  <span className="text-white">const </span>
  <span className="text-cyan-400">learn</span>
  <span className="text-white"> = () =&gt; {'{'}</span>
</div>
                  <div className="text-white/80 ml-4">return (</div>
                  <div className="text-green-400 ml-8">&lt;Future</div>
                  <div className="text-blue-400 ml-12">career={`{`}<span className="text-yellow-400">"amazing"</span>{`}`}</div>
                  <div className="text-blue-400 ml-12">skills={`{`}<span className="text-yellow-400">"unlimited"</span>{`}`}</div>
                  <div className="text-green-400 ml-8">/&gt;</div>
                  <div className="text-white/80 ml-4">);</div>
                  <div className="text-purple-400">{`}`};</div>
                </div>
                
                <div className="mt-4 flex items-center space-x-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                  <span className="text-green-400 text-xs">–ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞</span>
                </div>
              </GlassCard>
            </div>

            {/* Features grid */}
            {features.map((feature, index) => (
              <div key={feature.id} className="lg:col-span-1">
                <GlassCard 
                  className={`p-6 h-full cursor-pointer transition-all duration-500 hover:scale-105 ${
                    hoveredCard === feature.id ? 'shadow-2xl shadow-purple-500/20' : ''
                  }`}
                  onMouseEnter={() => setHoveredCard(feature.id)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  <div className={`p-3 rounded-2xl bg-gradient-to-br ${feature.gradient}/20 mb-4 w-fit`}>
                    <div className={`text-transparent bg-gradient-to-r ${feature.gradient} bg-clip-text`}>
                      {feature.icon}
                    </div>
                  </div>
                  
                  <h3 className="text-lg font-bold text-white mb-3">{feature.title}</h3>
                  <p className="text-white/70 text-sm mb-4 leading-relaxed">{feature.description}</p>
                  
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white mb-1">
                      <AnimatedCounter 
                        end={feature.stats.value} 
                        suffix={feature.stats.suffix}
                        duration={2000 + index * 200}
                      />
                    </div>
                    <div className="text-white/60 text-xs">{feature.stats.label}</div>
                  </div>
                </GlassCard>
              </div>
            ))}

            {/* Achievements */}
            <div className="lg:col-span-2">
              <GlassCard className="p-6 h-full">
                <div className="flex items-center space-x-3 mb-6">
                  <Trophy className="w-6 h-6 text-yellow-400" />
                  <h3 className="text-xl font-bold text-white">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                </div>
                
                <div className="grid gap-4">
                  {achievements.map((achievement, index) => (
                    <div key={index} className="flex items-center space-x-4 p-4 rounded-xl bg-white/5 hover:bg-white/10 transition-colors duration-300">
                      <span className="text-3xl">{achievement.icon}</span>
                      <div>
                        <h4 className="text-white font-medium">{achievement.title}</h4>
                        <p className="text-white/60 text-sm">{achievement.org}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </GlassCard>
            </div>

            {/* Learning path preview */}
            <div className="lg:col-span-2">
              <GlassCard className="p-6 h-full">
                <div className="flex items-center space-x-3 mb-6">
                  <GitBranch className="w-6 h-6 text-green-400" />
                  <h3 className="text-xl font-bold text-white">–ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è</h3>
                </div>
                
                <div className="space-y-4">
                  {[
                    { step: 1, title: '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', status: 'completed', progress: 100 },
                    { step: 2, title: 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', status: 'current', progress: 65 },
                    { step: 3, title: 'Backend –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', status: 'locked', progress: 0 },
                    { step: 4, title: 'DevOps –∏ –¥–µ–ø–ª–æ–π', status: 'locked', progress: 0 }
                  ].map((item, index) => (
                    <div key={index} className="flex items-center space-x-4">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                        item.status === 'completed' ? 'bg-green-500 text-white' :
                        item.status === 'current' ? 'bg-purple-500 text-white' :
                        'bg-white/20 text-white/60'
                      }`}>
                        {item.status === 'completed' ? '‚úì' : item.step}
                      </div>
                      
                      <div className="flex-1">
                        <div className="flex justify-between items-center mb-1">
                          <span className={`font-medium ${
                            item.status === 'locked' ? 'text-white/60' : 'text-white'
                          }`}>
                            {item.title}
                          </span>
                          <span className="text-white/60 text-sm">{item.progress}%</span>
                        </div>
                        <div className="w-full bg-white/10 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full transition-all duration-1000 ${
                              item.status === 'completed' ? 'bg-green-500' :
                              item.status === 'current' ? 'bg-gradient-to-r from-purple-500 to-pink-500' :
                              'bg-white/20'
                            }`}
                            style={{ width: `${item.progress}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </GlassCard>
            </div>
          </div>

          {/* CTA Section */}
          <div className="text-center">
            <GlassCard className="p-12 relative overflow-hidden group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-pink-500/10 to-cyan-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-1000" />
              <div className="relative z-10">
                <h2 className="text-4xl font-bold text-white mb-6">
                  –ì–æ—Ç–æ–≤—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å?
                </h2>
                <p className="text-xl text-white/80 mb-8 max-w-2xl mx-auto">
                  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç—ã—Å—è—á–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—Ç—Ä–æ—è—Ç —Å–≤–æ–µ –±—É–¥—É—â–µ–µ —Å Vira.Dev
                </p>
                
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Link to="/register">
                    <Button
                      variant="primary"
                      size="lg"
                      icon={<Rocket size={20} />}
                      className="group relative overflow-hidden"
                    >
                      <span className="relative z-10">–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                      <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 -translate-x-full group-hover:translate-x-full transition-transform duration-1000" />
                    </Button>
                  </Link>
                  
                  <Button
                    variant="secondary"
                    size="lg"
                    icon={<BookOpen size={20} />}
                  >
                    –°–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ
                  </Button>
                </div>
              </div>
            </GlassCard>
          </div>
        </div>
      </div>
    </div>
  );
}